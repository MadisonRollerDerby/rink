from django.core.exceptions import ValidationError
from django.db.utils import IntegrityError
from django.test import TestCase
from django.urls import resolve, Resolver404
from django.utils import timezone

from .factories import RegistrationEventFactory, RegistrationInviteFactory
from billing.models import BillingPeriod
from league.tests.factories import LeagueFactory
from legal.tests.factories import LegalDocumentFactory
from registration.models import RegistrationEvent, RegistrationInvite
from users.tests.factories import UserFactory

from datetime import date
from dateutil.relativedelta import relativedelta
from rink.utils.date import get_aware_datetime
from unittest import skip


class TestRegistrationEventModel(TestCase):
    event_factory = RegistrationEventFactory

    def test_required_fields(self):
        # Check that required fields are checked.
        event = RegistrationEvent()

        with self.assertRaises(ValidationError):
            event.full_clean()

        event.name = "Test Event"
        with self.assertRaises(ValidationError):
            event.full_clean()

        event.league = LeagueFactory()
        with self.assertRaises(ValidationError):
            event.full_clean()

        event.start_date = "2010-01-01"
        event.end_date = "2010-12-31"

        event.full_clean()
        event.save()

    def test_all_fields(self):
        event = RegistrationEvent(
            name="All Fields Test",
            league=LeagueFactory(),
            description="Description of event here",
            start_date="2010-01-01",
            end_date="2010-12-31",
            public_registration_open_date=get_aware_datetime("2009-12-01 00:00:00"),
            public_registration_closes_date=get_aware_datetime("2009-12-31 23:59:59"),
            invite_expiration_date=get_aware_datetime("2009-12-31 23:59:59"),
            minimum_registration_age=18,
            maximum_registration_age=25,
        )
        event.full_clean()
        event.save()

        self.assertEqual(event.name, "All Fields Test")
        self.assertEqual(event.slug, "all-fields-test")
        self.assertEqual(event.description, "Description of event here")
        self.assertEqual(event.start_date, date(2010, 1, 1))
        self.assertEqual(event.end_date, date(2010, 12, 31))
        self.assertEqual(event.public_registration_open_date, get_aware_datetime("2009-12-01 00:00:00"))
        self.assertEqual(event.public_registration_closes_date, get_aware_datetime("2009-12-31 23:59:59"))
        self.assertEqual(event.invite_expiration_date, get_aware_datetime("2009-12-31 23:59:59"))
        self.assertEqual(event.minimum_registration_age, 18)
        self.assertEqual(event.maximum_registration_age, 25)

    def test_attach_legal_documents(self):
        event = self.event_factory()

        legal_doc1 = LegalDocumentFactory()
        legal_doc2 = LegalDocumentFactory()

        event.legal_forms.add(legal_doc1)
        event.legal_forms.add(legal_doc2)

        self.assertEqual(event.legal_forms.count(), 2)

    def test_slug_signal(self):
        # Test that the slug is actually generated by the signal
        event = self.event_factory(name="Testing Slugfest")
        self.assertEquals("testing-slugfest", event.slug)

    def test_slug_unique_same_league(self):
        league = LeagueFactory()
        event1 = self.event_factory(name="Testing Slugfest Duplicate", league=league)
        with self.assertRaises(IntegrityError):
            event2 = self.event_factory(name="Testing Slugfest Duplicate", league=league)

    def test_slug_unique_different_leagues(self):
        # Different leagues should be able to create events with the same slug
        event1 = self.event_factory(name="Testing Slugfest Duplicate")
        event2 = self.event_factory(name="Testing Slugfest Duplicate")
        self.assertEqual(event1.slug, event2.slug)
        self.assertNotEqual(
            event1.get_kwargs_for_url(),
            event2.get_kwargs_for_url(),
        )

    def test_str(self):
        event = self.event_factory()
        self.assertEquals(str(event), event.name)

    @skip("Not ready")
    def test_get_urls(self):
        event = self.event_factory()

        try:
            resolve(event.get_invites_url())
        except Resolver404 as e:
            self.fail("get_invites_url() did not resolve to a valid URL")

        try:
            resolve(event.get_roster_url())
        except Resolver404 as e:
            self.fail("get_roster_url() did not resolve to a valid URL")

        try:
            resolve(event.get_settings_url())
        except Resolver404 as e:
            self.fail("get_settings_url() did not resolve to a valid URL")

        try:
            resolve(event.get_billing_periods_url())
        except Resolver404 as e:
            self.fail("get_billing_periods_url() did not resolve to a valid URL")

    def test_description_markdown_makes_html(self):
        event = self.event_factory(description="**NEATO?**")
        self.assertEqual(event.description_html, "<p><strong>NEATO?</strong></p>")

    def test_league_cascade_deletes(self):
        league = LeagueFactory()
        event = self.event_factory(league=league)

        league.delete()

        with self.assertRaises(RegistrationEvent.DoesNotExist):
            event_shouldnt_exist = RegistrationEvent.objects.get(pk=event.pk)

    def test_create_single_billing_period_no_arguments(self):
        event = self.event_factory(
            start_date=date(2012, 1, 1),
            end_date=date(2012, 12, 31),
        )

        event.create_billing_period()

        bp_query = BillingPeriod.objects.filter(event=event)
        self.assertEqual(bp_query.count(), 1)
        bp = bp_query[0]

        self.assertEqual(bp.name, "{} - Registration Dues".format(event.name))
        self.assertEqual(bp.league, event.league)
        self.assertEqual(bp.event, event)
        self.assertEqual(bp.start_date, event.start_date)
        self.assertEqual(bp.end_date, event.end_date)
        self.assertEqual(
            bp.invoice_date,
            event.start_date - relativedelta(days=event.league.default_invoice_day_diff),
        )
        self.assertEqual(bp.due_date, event.start_date)

    def test_create_monthly_billing_periods(self):
        event = self.event_factory(
            start_date=date(2012, 1, 1),
            end_date=date(2012, 12, 31),
        )

        periods = event.create_monthly_billing_periods()

        periods_query = BillingPeriod.objects.filter(event=event)

        self.assertEqual(periods_query.count(), 12)

        bp = periods_query[2]

        self.assertEqual(bp.name, "March Dues")
        self.assertEqual(bp.league, event.league)
        self.assertEqual(bp.event, event)
        self.assertEqual(bp.start_date, date(2012, 3, 1))
        self.assertEqual(bp.end_date, date(2012, 3, 31))
        self.assertEqual(
            bp.invoice_date,
            date(2012, 3, 1) - relativedelta(days=event.league.default_invoice_day_diff),
        )
        self.assertEqual(bp.due_date, date(2012, 3, 1))


class TestRegistrationInvite(TestCase):
    invite_factory = RegistrationInviteFactory

    def test_str(self):
        invite = self.invite_factory()
        self.assertEquals(str(invite), invite.email)

    def test_required_fields(self):
        invite = RegistrationInvite()
        with self.assertRaises(ValidationError):
            invite.full_clean()
            invite.save()

    def test_minimum_fields(self):
        invite = self.invite_factory()

    def test_uuid_generated(self):
        invite = self.invite_factory()
        self.assertTrue(invite.uuid)

    def test_uuid_is_unique(self):
        invite1 = self.invite_factory()
        with self.assertRaises(IntegrityError):
            invite2 = self.invite_factory(uuid=invite1.uuid)

    def test_public_registration_default(self):
        invite = self.invite_factory()
        self.assertFalse(invite.public_registration)

    def test_event_delete_cascade(self):
        event = RegistrationEventFactory()
        invite = self.invite_factory(event=event)
        event.delete()
        with self.assertRaises(RegistrationInvite.DoesNotExist):
            invite = RegistrationInvite.objects.get(pk=invite.pk)

    def test_user_delete_cascade(self):
        user = UserFactory()
        invite = self.invite_factory(user=user)
        user.delete()
        with self.assertRaises(RegistrationInvite.DoesNotExist):
            invite = RegistrationInvite.objects.get(pk=invite.pk)

    def test_get_invite_url(self):
        invite = self.invite_factory()
        try:
            resolve(invite.get_invite_url())
        except Resolver404 as e:
            self.fail("get_invite_url() did not resolve to a valid URL")
